// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mq

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProducerAPIClient is the client API for ProducerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProducerAPIClient interface {
	// SendMessage.
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
}

type producerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewProducerAPIClient(cc grpc.ClientConnInterface) ProducerAPIClient {
	return &producerAPIClient{cc}
}

func (c *producerAPIClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/mq.ProducerAPI/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProducerAPIServer is the server API for ProducerAPI service.
// All implementations must embed UnimplementedProducerAPIServer
// for forward compatibility
type ProducerAPIServer interface {
	// SendMessage.
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	mustEmbedUnimplementedProducerAPIServer()
}

// UnimplementedProducerAPIServer must be embedded to have forward compatible implementations.
type UnimplementedProducerAPIServer struct {
}

func (UnimplementedProducerAPIServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedProducerAPIServer) mustEmbedUnimplementedProducerAPIServer() {}

// UnsafeProducerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProducerAPIServer will
// result in compilation errors.
type UnsafeProducerAPIServer interface {
	mustEmbedUnimplementedProducerAPIServer()
}

func RegisterProducerAPIServer(s grpc.ServiceRegistrar, srv ProducerAPIServer) {
	s.RegisterService(&_ProducerAPI_serviceDesc, srv)
}

func _ProducerAPI_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerAPIServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mq.ProducerAPI/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerAPIServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProducerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mq.ProducerAPI",
	HandlerType: (*ProducerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ProducerAPI_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mq.proto",
}

// ConsumerAPIClient is the client API for ConsumerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerAPIClient interface {
	// RecvMessage.
	RecvMessage(ctx context.Context, in *RecvMessageRequest, opts ...grpc.CallOption) (*RecvMessageResponse, error)
}

type consumerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerAPIClient(cc grpc.ClientConnInterface) ConsumerAPIClient {
	return &consumerAPIClient{cc}
}

func (c *consumerAPIClient) RecvMessage(ctx context.Context, in *RecvMessageRequest, opts ...grpc.CallOption) (*RecvMessageResponse, error) {
	out := new(RecvMessageResponse)
	err := c.cc.Invoke(ctx, "/mq.ConsumerAPI/RecvMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerAPIServer is the server API for ConsumerAPI service.
// All implementations must embed UnimplementedConsumerAPIServer
// for forward compatibility
type ConsumerAPIServer interface {
	// RecvMessage.
	RecvMessage(context.Context, *RecvMessageRequest) (*RecvMessageResponse, error)
	mustEmbedUnimplementedConsumerAPIServer()
}

// UnimplementedConsumerAPIServer must be embedded to have forward compatible implementations.
type UnimplementedConsumerAPIServer struct {
}

func (UnimplementedConsumerAPIServer) RecvMessage(context.Context, *RecvMessageRequest) (*RecvMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvMessage not implemented")
}
func (UnimplementedConsumerAPIServer) mustEmbedUnimplementedConsumerAPIServer() {}

// UnsafeConsumerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerAPIServer will
// result in compilation errors.
type UnsafeConsumerAPIServer interface {
	mustEmbedUnimplementedConsumerAPIServer()
}

func RegisterConsumerAPIServer(s grpc.ServiceRegistrar, srv ConsumerAPIServer) {
	s.RegisterService(&_ConsumerAPI_serviceDesc, srv)
}

func _ConsumerAPI_RecvMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecvMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerAPIServer).RecvMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mq.ConsumerAPI/RecvMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerAPIServer).RecvMessage(ctx, req.(*RecvMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConsumerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mq.ConsumerAPI",
	HandlerType: (*ConsumerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecvMessage",
			Handler:    _ConsumerAPI_RecvMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mq.proto",
}
